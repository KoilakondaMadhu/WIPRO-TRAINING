CREATE OR REPLACE PROCEDURE write_file(
    p_errbuf   OUT VARCHAR2,
    p_retcode  OUT NUMBER,
    p_dir      VARCHAR2,
    p_filename VARCHAR2
) IS
    v_line  VARCHAR2(500);
    l_file  UTL_FILE.FILE_TYPE;
BEGIN
    -- Open file for writing
    l_file := UTL_FILE.FOPEN(p_dir, p_filename, 'W');

    -- Write header
    UTL_FILE.PUT_LINE(l_file, 'Employee Details');
    UTL_FILE.PUT_LINE(l_file, 
        'Employee_Id || Last Name || First Name || Phone Number || Job Id');

  -- Loop through managers
    FOR c1 IN (
        SELECT DISTINCT employee_id, last_name, first_name, phone_number, job_id
        FROM employees
        WHERE employee_id IN (
            SELECT DISTINCT manager_id 
            FROM employees 
            WHERE manager_id IS NOT NULL
        )
        ORDER BY employee_id
    ) LOOP
        -- Loop through employees reporting to each manager
        FOR c2 IN (
            SELECT employee_id, last_name, first_name, phone_number, job_id
            FROM employees
            WHERE manager_id = c1.employee_id
        ) LOOP
   v_line := c1.employee_id || ' || ' || c1.last_name || ' || ' || c1.first_name ||
                      ' || ' || c1.phone_number || ' || ' || c1.job_id || ' --> ' ||
                      c2.employee_id || ' || ' || c2.last_name || ' || ' || c2.first_name ||
                      ' || ' || c2.phone_number || ' || ' || c2.job_id;

            UTL_FILE.PUT_LINE(l_file, v_line);
        END LOOP;
    END LOOP;

    -- Close file
    UTL_FILE.FCLOSE(l_file);

EXCEPTION
    WHEN OTHERS THEN
        p_errbuf  := SQLERRM;
        p_retcode := 2;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
