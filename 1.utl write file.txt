CREATE OR REPLACE PROCEDURE write_file(
    p_errbuf   OUT VARCHAR2,
    p_retcode  OUT NUMBER,
    p_dir      VARCHAR2,
    p_filename VARCHAR2
) IS
    v_line  VARCHAR2(500);
    l_file  UTL_FILE.FILE_TYPE;
BEGIN
    -- Open file for writing
    l_file := UTL_FILE.FOPEN(p_dir, p_filename, 'W');

    -- Write header
    UTL_FILE.PUT_LINE(l_file, 'Employee Details');
    UTL_FILE.PUT_LINE(l_file, 
        'Employee_Id || Last Name || First Name || Phone Number || Job Id');

  -- Loop through managers
    FOR c1 IN (
        SELECT DISTINCT employee_id, last_name, first_name, phone_number, job_id
        FROM employees
        WHERE employee_id IN (
            SELECT DISTINCT manager_id 
            FROM employees 
            WHERE manager_id IS NOT NULL
        )
        ORDER BY employee_id
    ) LOOP
        -- Loop through employees reporting to each manager
        FOR c2 IN (
            SELECT employee_id, last_name, first_name, phone_number, job_id
            FROM employees
            WHERE manager_id = c1.employee_id
        ) LOOP
   v_line := c1.employee_id || ' || ' || c1.last_name || ' || ' || c1.first_name ||
                      ' || ' || c1.phone_number || ' || ' || c1.job_id || ' --> ' ||
                      c2.employee_id || ' || ' || c2.last_name || ' || ' || c2.first_name ||
                      ' || ' || c2.phone_number || ' || ' || c2.job_id;

            UTL_FILE.PUT_LINE(l_file, v_line);
        END LOOP;
    END LOOP;

    -- Close file
    UTL_FILE.FCLOSE(l_file);

EXCEPTION
    WHEN OTHERS THEN
        p_errbuf  := SQLERRM;
        p_retcode := 2;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/






-------------------------------------------------------------------------------------------------------------------------------------
-------------------------manager ---------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------




CREATE OR REPLACE PROCEDURE manger_reportlist_tm
(
    p_dir      VARCHAR2,
    p_filename VARCHAR2
) IS
    f_file  UTL_FILE.FILE_TYPE;
    v_text  VARCHAR2(500);
    v_lines PLS_INTEGER := 1;
BEGIN
    -- Open file for writing
    f_file := UTL_FILE.FOPEN(p_dir, p_filename, 'W');

    -- Write Header
    UTL_FILE.PUT_LINE(f_file, 'Employee Details');
    UTL_FILE.PUT_LINE(f_file,
                      'Employee Id' || ' | ' ||
                      'Last Name'   || ' | ' ||
                      'First Name'  || ' | ' ||
                      'Phone Number'|| ' | ' ||
                      'Job Id');
    UTL_FILE.PUT_LINE(f_file, '---------------------------------------------------');

 -- Outer Loop for Managers
    FOR c1 IN (
        SELECT employee_id,
               last_name,
               first_name,
               phone_number,
               job_id
        FROM employees
        WHERE employee_id IN (
            SELECT DISTINCT manager_id
            FROM employees
            WHERE manager_id IS NOT NULL
        )
        ORDER BY employee_id
    ) LOOP
        -- Write Manager Info
        UTL_FILE.PUT_LINE(f_file,
                          c1.employee_id || ' | ' ||
                          c1.last_name   || ' | ' ||
                          c1.first_name  || ' | ' ||
                          c1.phone_number|| ' | ' ||
                          c1.job_id);

  -- Inner Loop for Employees under each Manager
        FOR c2 IN (
            SELECT employee_id,
                   last_name,
                   first_name,
                   phone_number,
                   job_id,
                   manager_id
            FROM employees
            WHERE manager_id = c1.employee_id
        ) LOOP
            UTL_FILE.PUT_LINE(f_file,
                              '    ' || c2.employee_id || ' | ' ||
                              c2.last_name   || ' | ' ||
                              c2.first_name  || ' | ' ||
                              c2.phone_number|| ' | ' ||
                              c2.job_id);
        END LOOP;
    END LOOP;

    -- Close file
    UTL_FILE.FCLOSE(f_file);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/



----------------------------------------------------------------------------------------------------------------------------------------




CREATE OR REPLACE PROCEDURE write_filemt (
    p_errbuf   OUT VARCHAR2,
    p_retcode  OUT NUMBER,
    p_dir      IN  VARCHAR2,
    p_filename IN  VARCHAR2
) IS
    f_file  UTL_FILE.FILE_TYPE;
BEGIN
    -- Open file for writing
    f_file := UTL_FILE.FOPEN(p_dir, p_filename, 'W');

    -- Write Header
    UTL_FILE.PUT_LINE(f_file, 'Employee Details');
    UTL_FILE.PUT_LINE(f_file,
                      'Employee Id' || ' | ' ||
                      'Last Name'   || ' | ' ||
                      'First Name'  || ' | ' ||
                      'Phone Number'|| ' | ' ||
                      'Job Id');
    UTL_FILE.PUT_LINE(f_file,
                      '---------------------------------------------------------');

 -- Outer Loop for Managers
    FOR c1 IN (
        SELECT employee_id,
               last_name,
               first_name,
               phone_number,
               job_id
        FROM employees
        WHERE employee_id IN (
            SELECT DISTINCT manager_id
            FROM employees
            WHERE manager_id IS NOT NULL
        )
        ORDER BY employee_id
    ) LOOP
        -- Manager row
        UTL_FILE.PUT_LINE(f_file,
                          c1.employee_id || ' | ' ||
                          c1.last_name   || ' | ' ||
                          c1.first_name  || ' | ' ||
                          c1.phone_number|| ' | ' ||
                          c1.job_id);


 -- Inner Loop for Employees reporting to this Manager
        FOR c2 IN (
            SELECT employee_id,
                   last_name,
                   first_name,
                   phone_number,
                   job_id
            FROM employees
            WHERE manager_id = c1.employee_id
        ) LOOP
            UTL_FILE.PUT_LINE(f_file,
                              '    ' || c2.employee_id || ' | ' ||
                              c2.last_name   || ' | ' ||
                              c2.first_name  || ' | ' ||
                              c2.phone_number|| ' | ' ||
                              c2.job_id);
        END LOOP;
    END LOOP;

    -- Close file
    UTL_FILE.FCLOSE(f_file);


 -- Success
    p_retcode := 0;
    p_errbuf  := NULL;

EXCEPTION
    WHEN OTHERS THEN
        -- Failure handling
        IF UTL_FILE.IS_OPEN(f_file) THEN
            UTL_FILE.FCLOSE(f_file);
        END IF;
        p_retcode := 2;
        p_errbuf  :=Â SQLERRM;
END;
/



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

empmadhu.txt-------------------------------------------------------------
--------------------------------------------------------------------------
Indent,Job id,job_title,min salary,Max Salary
J,AD_PRES,President,20080,40000
J,AD_VP,Administration President,15000,30000
J,AD_ASST,Administration Assistant,3000,6000
,FI_MGR,Finance Manager,8200,16000
,FI_ACCOUNT,Accountant,4200,9000
J,IT_PROG,IT Programmer,12000,18000
J,AC_ACCOUNT,Public Accountant,4200,9000
Indent,emp id,last name,job id,hire date,salary
E,100,King,AD_PRES,17-Jun-03,24000
E,101,Kochhar,AD_VP,21-Sep-05,17000
E,102,De Haan,AD_VP,13-Jan-01,17000
,103,Hunold,IT_PROG,3-Jan-06,9000
E,104,Ernst,IT_PROG,21-May-07,6000
R,105,Austin,IT_PROG,25-Jun-05,4800
E,106,Pataballa,FI_MGR,5-Feb-06,4800
,107,Lorentz,IT_PROG,7-Feb-07,4200
E,108,Greenberg,FI_MGR,17-Aug-02,12008


















